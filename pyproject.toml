# Root workspace configuration for OSPSD TA Task
[tool.uv.workspace]
members = [
    "src/email_api",
]

[project]
name = "ospsd-ta-task"
version = "0.1.0"
description = "OSPSD TA Task - Email client workspace"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []

[tool.uv.sources]
# Workspace component sources
email-api = { workspace = true }

[project.optional-dependencies]
# Shared development tools used across all workspace components
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "coverage[toml]>=7.0.0",
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

# Component feature groups
email = [
    "email-api>=0.1.0",
]


# Shared tool configuration for all workspace members
[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]

[tool.ruff.lint]
# Enable ALL available rules - start strict, then selectively disable with documentation
select = ["ALL"]

ignore = [
    # === DOCUMENTED EXCEPTIONS ===
    
    # Docstring formatting conflicts
    "D203",    # one-blank-line-before-class (conflicts with D211)
    "D213",    # multi-line-docstring-summary-second-line (conflicts with D212)
    
    # Test-specific allowances  
    "S101",    # assert statements (essential for tests)
    "PLR2004", # magic values (acceptable in tests for clarity)
    "EM101",   # string literals in exceptions (acceptable in tests)
    "TRY003",  # long exception messages (acceptable in tests)
    
    # Type annotation allowances
    "ANN401",  # Any type (required for __aexit__ method signature)
    
    # Import organization (handled by isort integration)
    "I001",    # import sorting (let ruff handle this automatically)
    
    # Performance micro-optimizations (not critical for this codebase)
    "PERF203", # try-except in loop (readability over micro-optimization)
    
    # Module-level docstrings (covered by component-level docs)  
    "D100",    # missing-docstring-in-public-module
    
    # Complexity limits (these are interface definitions, not implementations)
    "C901",    # complex-structure (not applicable to protocol definitions)
    "PLR0913", # too-many-arguments (protocol methods need flexibility)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",       # docstrings not required in tests
    "ANN",     # type annotations not required in tests  
    "ARG",     # unused arguments common in test fixtures
    "FBT",     # boolean positional args ok in tests
    "S",       # security checks less relevant in tests
    "PLR",     # complexity checks not needed in tests
    "SLF001",  # private member access (needed for testing)
]
"src/*/tests/*" = [
    "D",       # docstrings not required in tests
    "ANN",     # type annotations not required in tests
    "ARG",     # unused arguments common in test fixtures  
    "FBT",     # boolean positional args ok in tests
    "S",       # security checks less relevant in tests
    "PLR",     # complexity checks not needed in tests
    "SLF001",  # private member access (needed for testing)
]
"main.py" = [
    "T201",    # print statements (appropriate for demo/entry scripts)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
# Enable ALL strictness options
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
# Additional strict options
disallow_any_expr = false  # Too restrictive for practical use
disallow_any_decorated = false  # Conflicts with common decorators
disallow_any_explicit = false  # Sometimes Any is the correct type
strict_optional = true
strict_equality = true
strict_concatenate = true
show_error_codes = true
show_column_numbers = true

# Workspace-level pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov-report=html",
    "--cov-report=term-missing",
]
testpaths = ["src/*/tests", "tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"